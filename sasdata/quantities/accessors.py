"""

This file is autogenerated!

Do not edit by hand, instead edit the files that build it (_build_tables.py, _accessor_base.py)


                                                                                                                          
                                                                                                                          
DDDDDDDDDDDDD                              NNNNNNNN        NNNNNNNN                          tttt                         
D::::::::::::DDD                           N:::::::N       N::::::N                       ttt:::t                         
D:::::::::::::::DD                         N::::::::N      N::::::N                       t:::::t                         
DDD:::::DDDDD:::::D                        N:::::::::N     N::::::N                       t:::::t                         
  D:::::D    D:::::D    ooooooooooo        N::::::::::N    N::::::N   ooooooooooo   ttttttt:::::ttttttt                   
  D:::::D     D:::::D oo:::::::::::oo      N:::::::::::N   N::::::N oo:::::::::::oo t:::::::::::::::::t                   
  D:::::D     D:::::Do:::::::::::::::o     N:::::::N::::N  N::::::No:::::::::::::::ot:::::::::::::::::t                   
  D:::::D     D:::::Do:::::ooooo:::::o     N::::::N N::::N N::::::No:::::ooooo:::::otttttt:::::::tttttt                   
  D:::::D     D:::::Do::::o     o::::o     N::::::N  N::::N:::::::No::::o     o::::o      t:::::t                         
  D:::::D     D:::::Do::::o     o::::o     N::::::N   N:::::::::::No::::o     o::::o      t:::::t                         
  D:::::D     D:::::Do::::o     o::::o     N::::::N    N::::::::::No::::o     o::::o      t:::::t                         
  D:::::D    D:::::D o::::o     o::::o     N::::::N     N:::::::::No::::o     o::::o      t:::::t    tttttt               
DDD:::::DDDDD:::::D  o:::::ooooo:::::o     N::::::N      N::::::::No:::::ooooo:::::o      t::::::tttt:::::t               
D:::::::::::::::DD   o:::::::::::::::o     N::::::N       N:::::::No:::::::::::::::o      tt::::::::::::::t               
D::::::::::::DDD      oo:::::::::::oo      N::::::N        N::::::N oo:::::::::::oo         tt:::::::::::tt               
DDDDDDDDDDDDD           ooooooooooo        NNNNNNNN         NNNNNNN   ooooooooooo             ttttttttttt                 
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                  dddddddd                                                                                
EEEEEEEEEEEEEEEEEEEEEE            d::::::d  iiii          tttt               BBBBBBBBBBBBBBBBB                            
E::::::::::::::::::::E            d::::::d i::::i      ttt:::t               B::::::::::::::::B                           
E::::::::::::::::::::E            d::::::d  iiii       t:::::t               B::::::BBBBBB:::::B                          
EE::::::EEEEEEEEE::::E            d:::::d              t:::::t               BB:::::B     B:::::B                         
  E:::::E       EEEEEE    ddddddddd:::::d iiiiiiittttttt:::::ttttttt           B::::B     B:::::Byyyyyyy           yyyyyyy
  E:::::E               dd::::::::::::::d i:::::it:::::::::::::::::t           B::::B     B:::::B y:::::y         y:::::y 
  E::::::EEEEEEEEEE    d::::::::::::::::d  i::::it:::::::::::::::::t           B::::BBBBBB:::::B   y:::::y       y:::::y  
  E:::::::::::::::E   d:::::::ddddd:::::d  i::::itttttt:::::::tttttt           B:::::::::::::BB     y:::::y     y:::::y   
  E:::::::::::::::E   d::::::d    d:::::d  i::::i      t:::::t                 B::::BBBBBB:::::B     y:::::y   y:::::y    
  E::::::EEEEEEEEEE   d:::::d     d:::::d  i::::i      t:::::t                 B::::B     B:::::B     y:::::y y:::::y     
  E:::::E             d:::::d     d:::::d  i::::i      t:::::t                 B::::B     B:::::B      y:::::y:::::y      
  E:::::E       EEEEEEd:::::d     d:::::d  i::::i      t:::::t    tttttt       B::::B     B:::::B       y:::::::::y       
EE::::::EEEEEEEE:::::Ed::::::ddddd::::::ddi::::::i     t::::::tttt:::::t     BB:::::BBBBBB::::::B        y:::::::y        
E::::::::::::::::::::E d:::::::::::::::::di::::::i     tt::::::::::::::t     B:::::::::::::::::B          y:::::y         
E::::::::::::::::::::E  d:::::::::ddd::::di::::::i       tt:::::::::::tt     B::::::::::::::::B          y:::::y          
EEEEEEEEEEEEEEEEEEEEEE   ddddddddd   dddddiiiiiiii         ttttttttttt       BBBBBBBBBBBBBBBBB          y:::::y           
                                                                                                       y:::::y            
                                                                                                      y:::::y             
                                                                                                     y:::::y              
                                                                                                    y:::::y               
                                                                                                   yyyyyyy                
                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                      dddddddd                                            
HHHHHHHHH     HHHHHHHHH                                               d::::::d                                            
H:::::::H     H:::::::H                                               d::::::d                                            
H:::::::H     H:::::::H                                               d::::::d                                            
HH::::::H     H::::::HH                                               d:::::d                                             
  H:::::H     H:::::H    aaaaaaaaaaaaa  nnnn  nnnnnnnn        ddddddddd:::::d                                             
  H:::::H     H:::::H    a::::::::::::a n:::nn::::::::nn    dd::::::::::::::d                                             
  H::::::HHHHH::::::H    aaaaaaaaa:::::an::::::::::::::nn  d::::::::::::::::d                                             
  H:::::::::::::::::H             a::::ann:::::::::::::::nd:::::::ddddd:::::d                                             
  H:::::::::::::::::H      aaaaaaa:::::a  n:::::nnnn:::::nd::::::d    d:::::d                                             
  H::::::HHHHH::::::H    aa::::::::::::a  n::::n    n::::nd:::::d     d:::::d                                             
  H:::::H     H:::::H   a::::aaaa::::::a  n::::n    n::::nd:::::d     d:::::d                                             
  H:::::H     H:::::H  a::::a    a:::::a  n::::n    n::::nd:::::d     d:::::d                                             
HH::::::H     H::::::HHa::::a    a:::::a  n::::n    n::::nd::::::ddddd::::::dd                                            
H:::::::H     H:::::::Ha:::::aaaa::::::a  n::::n    n::::n d:::::::::::::::::d                                            
H:::::::H     H:::::::H a::::::::::aa:::a n::::n    n::::n  d:::::::::ddd::::d                                            
HHHHHHHHH     HHHHHHHHH  aaaaaaaaaa  aaaa nnnnnn    nnnnnn   ddddddddd   ddddd                                            
                                                                                                                          


"""

from typing import TypeVar

from sasdata.quantities.quantity import Quantity
import sasdata.quantities.units as units


T = TypeVar("T")

class Accessor[T]:
    """ Base class """
    def __init__(self, value_target: str, unit_target: str):
        self._value_target = value_target
        self._unit_target = unit_target

    @property
    def quantity(self) -> Quantity[T]:
        raise NotImplementedError("Not implemented yet")

class LengthAccessor[T](Accessor[T]):
    dimension_name = 'length'
    
    @property
    def meters(self) -> T:
        return self.quantity.in_units_of(units.meters)

    @property
    def exameters(self) -> T:
        return self.quantity.in_units_of(units.exameters)

    @property
    def petameters(self) -> T:
        return self.quantity.in_units_of(units.petameters)

    @property
    def terameters(self) -> T:
        return self.quantity.in_units_of(units.terameters)

    @property
    def gigameters(self) -> T:
        return self.quantity.in_units_of(units.gigameters)

    @property
    def megameters(self) -> T:
        return self.quantity.in_units_of(units.megameters)

    @property
    def kilometers(self) -> T:
        return self.quantity.in_units_of(units.kilometers)

    @property
    def millimeters(self) -> T:
        return self.quantity.in_units_of(units.millimeters)

    @property
    def micrometers(self) -> T:
        return self.quantity.in_units_of(units.micrometers)

    @property
    def nanometers(self) -> T:
        return self.quantity.in_units_of(units.nanometers)

    @property
    def picometers(self) -> T:
        return self.quantity.in_units_of(units.picometers)

    @property
    def femtometers(self) -> T:
        return self.quantity.in_units_of(units.femtometers)

    @property
    def attometers(self) -> T:
        return self.quantity.in_units_of(units.attometers)

    @property
    def decimeters(self) -> T:
        return self.quantity.in_units_of(units.decimeters)

    @property
    def centimeters(self) -> T:
        return self.quantity.in_units_of(units.centimeters)

    @property
    def angstroms(self) -> T:
        return self.quantity.in_units_of(units.angstroms)



class AreaAccessor[T](Accessor[T]):
    dimension_name = 'area'
    
    @property
    def square_meters(self) -> T:
        return self.quantity.in_units_of(units.square_meters)

    @property
    def square_exameters(self) -> T:
        return self.quantity.in_units_of(units.square_exameters)

    @property
    def square_petameters(self) -> T:
        return self.quantity.in_units_of(units.square_petameters)

    @property
    def square_terameters(self) -> T:
        return self.quantity.in_units_of(units.square_terameters)

    @property
    def square_gigameters(self) -> T:
        return self.quantity.in_units_of(units.square_gigameters)

    @property
    def square_megameters(self) -> T:
        return self.quantity.in_units_of(units.square_megameters)

    @property
    def square_kilometers(self) -> T:
        return self.quantity.in_units_of(units.square_kilometers)

    @property
    def square_millimeters(self) -> T:
        return self.quantity.in_units_of(units.square_millimeters)

    @property
    def square_micrometers(self) -> T:
        return self.quantity.in_units_of(units.square_micrometers)

    @property
    def square_nanometers(self) -> T:
        return self.quantity.in_units_of(units.square_nanometers)

    @property
    def square_picometers(self) -> T:
        return self.quantity.in_units_of(units.square_picometers)

    @property
    def square_femtometers(self) -> T:
        return self.quantity.in_units_of(units.square_femtometers)

    @property
    def square_attometers(self) -> T:
        return self.quantity.in_units_of(units.square_attometers)

    @property
    def square_decimeters(self) -> T:
        return self.quantity.in_units_of(units.square_decimeters)

    @property
    def square_centimeters(self) -> T:
        return self.quantity.in_units_of(units.square_centimeters)

    @property
    def square_angstroms(self) -> T:
        return self.quantity.in_units_of(units.square_angstroms)



class VolumeAccessor[T](Accessor[T]):
    dimension_name = 'volume'
    
    @property
    def litres(self) -> T:
        return self.quantity.in_units_of(units.litres)

    @property
    def cubic_meters(self) -> T:
        return self.quantity.in_units_of(units.cubic_meters)

    @property
    def cubic_exameters(self) -> T:
        return self.quantity.in_units_of(units.cubic_exameters)

    @property
    def cubic_petameters(self) -> T:
        return self.quantity.in_units_of(units.cubic_petameters)

    @property
    def cubic_terameters(self) -> T:
        return self.quantity.in_units_of(units.cubic_terameters)

    @property
    def cubic_gigameters(self) -> T:
        return self.quantity.in_units_of(units.cubic_gigameters)

    @property
    def cubic_megameters(self) -> T:
        return self.quantity.in_units_of(units.cubic_megameters)

    @property
    def cubic_kilometers(self) -> T:
        return self.quantity.in_units_of(units.cubic_kilometers)

    @property
    def cubic_millimeters(self) -> T:
        return self.quantity.in_units_of(units.cubic_millimeters)

    @property
    def cubic_micrometers(self) -> T:
        return self.quantity.in_units_of(units.cubic_micrometers)

    @property
    def cubic_nanometers(self) -> T:
        return self.quantity.in_units_of(units.cubic_nanometers)

    @property
    def cubic_picometers(self) -> T:
        return self.quantity.in_units_of(units.cubic_picometers)

    @property
    def cubic_femtometers(self) -> T:
        return self.quantity.in_units_of(units.cubic_femtometers)

    @property
    def cubic_attometers(self) -> T:
        return self.quantity.in_units_of(units.cubic_attometers)

    @property
    def cubic_decimeters(self) -> T:
        return self.quantity.in_units_of(units.cubic_decimeters)

    @property
    def cubic_centimeters(self) -> T:
        return self.quantity.in_units_of(units.cubic_centimeters)

    @property
    def cubic_angstroms(self) -> T:
        return self.quantity.in_units_of(units.cubic_angstroms)



class InverselengthAccessor[T](Accessor[T]):
    dimension_name = 'inverse_length'
    
    @property
    def per_meter(self) -> T:
        return self.quantity.in_units_of(units.per_meter)

    @property
    def per_exameter(self) -> T:
        return self.quantity.in_units_of(units.per_exameter)

    @property
    def per_petameter(self) -> T:
        return self.quantity.in_units_of(units.per_petameter)

    @property
    def per_terameter(self) -> T:
        return self.quantity.in_units_of(units.per_terameter)

    @property
    def per_gigameter(self) -> T:
        return self.quantity.in_units_of(units.per_gigameter)

    @property
    def per_megameter(self) -> T:
        return self.quantity.in_units_of(units.per_megameter)

    @property
    def per_kilometer(self) -> T:
        return self.quantity.in_units_of(units.per_kilometer)

    @property
    def per_millimeter(self) -> T:
        return self.quantity.in_units_of(units.per_millimeter)

    @property
    def per_micrometer(self) -> T:
        return self.quantity.in_units_of(units.per_micrometer)

    @property
    def per_nanometer(self) -> T:
        return self.quantity.in_units_of(units.per_nanometer)

    @property
    def per_picometer(self) -> T:
        return self.quantity.in_units_of(units.per_picometer)

    @property
    def per_femtometer(self) -> T:
        return self.quantity.in_units_of(units.per_femtometer)

    @property
    def per_attometer(self) -> T:
        return self.quantity.in_units_of(units.per_attometer)

    @property
    def per_decimeter(self) -> T:
        return self.quantity.in_units_of(units.per_decimeter)

    @property
    def per_centimeter(self) -> T:
        return self.quantity.in_units_of(units.per_centimeter)

    @property
    def per_angstrom(self) -> T:
        return self.quantity.in_units_of(units.per_angstrom)



class InverseareaAccessor[T](Accessor[T]):
    dimension_name = 'inverse_area'
    
    @property
    def per_square_meter(self) -> T:
        return self.quantity.in_units_of(units.per_square_meter)

    @property
    def per_square_exameter(self) -> T:
        return self.quantity.in_units_of(units.per_square_exameter)

    @property
    def per_square_petameter(self) -> T:
        return self.quantity.in_units_of(units.per_square_petameter)

    @property
    def per_square_terameter(self) -> T:
        return self.quantity.in_units_of(units.per_square_terameter)

    @property
    def per_square_gigameter(self) -> T:
        return self.quantity.in_units_of(units.per_square_gigameter)

    @property
    def per_square_megameter(self) -> T:
        return self.quantity.in_units_of(units.per_square_megameter)

    @property
    def per_square_kilometer(self) -> T:
        return self.quantity.in_units_of(units.per_square_kilometer)

    @property
    def per_square_millimeter(self) -> T:
        return self.quantity.in_units_of(units.per_square_millimeter)

    @property
    def per_square_micrometer(self) -> T:
        return self.quantity.in_units_of(units.per_square_micrometer)

    @property
    def per_square_nanometer(self) -> T:
        return self.quantity.in_units_of(units.per_square_nanometer)

    @property
    def per_square_picometer(self) -> T:
        return self.quantity.in_units_of(units.per_square_picometer)

    @property
    def per_square_femtometer(self) -> T:
        return self.quantity.in_units_of(units.per_square_femtometer)

    @property
    def per_square_attometer(self) -> T:
        return self.quantity.in_units_of(units.per_square_attometer)

    @property
    def per_square_decimeter(self) -> T:
        return self.quantity.in_units_of(units.per_square_decimeter)

    @property
    def per_square_centimeter(self) -> T:
        return self.quantity.in_units_of(units.per_square_centimeter)

    @property
    def per_square_angstrom(self) -> T:
        return self.quantity.in_units_of(units.per_square_angstrom)



class InversevolumeAccessor[T](Accessor[T]):
    dimension_name = 'inverse_volume'
    
    @property
    def per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_meter)

    @property
    def per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_exameter)

    @property
    def per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_petameter)

    @property
    def per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_terameter)

    @property
    def per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_gigameter)

    @property
    def per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_megameter)

    @property
    def per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_kilometer)

    @property
    def per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_millimeter)

    @property
    def per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_micrometer)

    @property
    def per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_nanometer)

    @property
    def per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_picometer)

    @property
    def per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_femtometer)

    @property
    def per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_attometer)

    @property
    def per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_decimeter)

    @property
    def per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_centimeter)

    @property
    def per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.per_cubic_angstrom)



class TimeAccessor[T](Accessor[T]):
    dimension_name = 'time'
    
    @property
    def seconds(self) -> T:
        return self.quantity.in_units_of(units.seconds)

    @property
    def milliseconds(self) -> T:
        return self.quantity.in_units_of(units.milliseconds)

    @property
    def microseconds(self) -> T:
        return self.quantity.in_units_of(units.microseconds)

    @property
    def nanoseconds(self) -> T:
        return self.quantity.in_units_of(units.nanoseconds)

    @property
    def picoseconds(self) -> T:
        return self.quantity.in_units_of(units.picoseconds)

    @property
    def femtoseconds(self) -> T:
        return self.quantity.in_units_of(units.femtoseconds)

    @property
    def attoseconds(self) -> T:
        return self.quantity.in_units_of(units.attoseconds)

    @property
    def minutes(self) -> T:
        return self.quantity.in_units_of(units.minutes)

    @property
    def hours(self) -> T:
        return self.quantity.in_units_of(units.hours)

    @property
    def days(self) -> T:
        return self.quantity.in_units_of(units.days)

    @property
    def years(self) -> T:
        return self.quantity.in_units_of(units.years)



class RateAccessor[T](Accessor[T]):
    dimension_name = 'rate'
    
    @property
    def hertz(self) -> T:
        return self.quantity.in_units_of(units.hertz)

    @property
    def exahertz(self) -> T:
        return self.quantity.in_units_of(units.exahertz)

    @property
    def petahertz(self) -> T:
        return self.quantity.in_units_of(units.petahertz)

    @property
    def terahertz(self) -> T:
        return self.quantity.in_units_of(units.terahertz)

    @property
    def gigahertz(self) -> T:
        return self.quantity.in_units_of(units.gigahertz)

    @property
    def megahertz(self) -> T:
        return self.quantity.in_units_of(units.megahertz)

    @property
    def kilohertz(self) -> T:
        return self.quantity.in_units_of(units.kilohertz)

    @property
    def millihertz(self) -> T:
        return self.quantity.in_units_of(units.millihertz)

    @property
    def microhertz(self) -> T:
        return self.quantity.in_units_of(units.microhertz)

    @property
    def nanohertz(self) -> T:
        return self.quantity.in_units_of(units.nanohertz)

    @property
    def picohertz(self) -> T:
        return self.quantity.in_units_of(units.picohertz)

    @property
    def femtohertz(self) -> T:
        return self.quantity.in_units_of(units.femtohertz)

    @property
    def attohertz(self) -> T:
        return self.quantity.in_units_of(units.attohertz)



class SpeedAccessor[T](Accessor[T]):
    dimension_name = 'speed'
    
    @property
    def meters_per_second(self) -> T:
        return self.quantity.in_units_of(units.meters_per_second)

    @property
    def meters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_millisecond)

    @property
    def meters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_microsecond)

    @property
    def meters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_nanosecond)

    @property
    def meters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_picosecond)

    @property
    def meters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_femtosecond)

    @property
    def meters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_attosecond)

    @property
    def meters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.meters_per_minute)

    @property
    def meters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.meters_per_hour)

    @property
    def meters_per_day(self) -> T:
        return self.quantity.in_units_of(units.meters_per_day)

    @property
    def meters_per_year(self) -> T:
        return self.quantity.in_units_of(units.meters_per_year)

    @property
    def exameters_per_second(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_second)

    @property
    def exameters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_millisecond)

    @property
    def exameters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_microsecond)

    @property
    def exameters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_nanosecond)

    @property
    def exameters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_picosecond)

    @property
    def exameters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_femtosecond)

    @property
    def exameters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_attosecond)

    @property
    def exameters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_minute)

    @property
    def exameters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_hour)

    @property
    def exameters_per_day(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_day)

    @property
    def exameters_per_year(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_year)

    @property
    def petameters_per_second(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_second)

    @property
    def petameters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_millisecond)

    @property
    def petameters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_microsecond)

    @property
    def petameters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_nanosecond)

    @property
    def petameters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_picosecond)

    @property
    def petameters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_femtosecond)

    @property
    def petameters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_attosecond)

    @property
    def petameters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_minute)

    @property
    def petameters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_hour)

    @property
    def petameters_per_day(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_day)

    @property
    def petameters_per_year(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_year)

    @property
    def terameters_per_second(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_second)

    @property
    def terameters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_millisecond)

    @property
    def terameters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_microsecond)

    @property
    def terameters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_nanosecond)

    @property
    def terameters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_picosecond)

    @property
    def terameters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_femtosecond)

    @property
    def terameters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_attosecond)

    @property
    def terameters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_minute)

    @property
    def terameters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_hour)

    @property
    def terameters_per_day(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_day)

    @property
    def terameters_per_year(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_year)

    @property
    def gigameters_per_second(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_second)

    @property
    def gigameters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_millisecond)

    @property
    def gigameters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_microsecond)

    @property
    def gigameters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_nanosecond)

    @property
    def gigameters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_picosecond)

    @property
    def gigameters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_femtosecond)

    @property
    def gigameters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_attosecond)

    @property
    def gigameters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_minute)

    @property
    def gigameters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_hour)

    @property
    def gigameters_per_day(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_day)

    @property
    def gigameters_per_year(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_year)

    @property
    def megameters_per_second(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_second)

    @property
    def megameters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_millisecond)

    @property
    def megameters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_microsecond)

    @property
    def megameters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_nanosecond)

    @property
    def megameters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_picosecond)

    @property
    def megameters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_femtosecond)

    @property
    def megameters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_attosecond)

    @property
    def megameters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_minute)

    @property
    def megameters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_hour)

    @property
    def megameters_per_day(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_day)

    @property
    def megameters_per_year(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_year)

    @property
    def kilometers_per_second(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_second)

    @property
    def kilometers_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_millisecond)

    @property
    def kilometers_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_microsecond)

    @property
    def kilometers_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_nanosecond)

    @property
    def kilometers_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_picosecond)

    @property
    def kilometers_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_femtosecond)

    @property
    def kilometers_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_attosecond)

    @property
    def kilometers_per_minute(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_minute)

    @property
    def kilometers_per_hour(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_hour)

    @property
    def kilometers_per_day(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_day)

    @property
    def kilometers_per_year(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_year)

    @property
    def millimeters_per_second(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_second)

    @property
    def millimeters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_millisecond)

    @property
    def millimeters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_microsecond)

    @property
    def millimeters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_nanosecond)

    @property
    def millimeters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_picosecond)

    @property
    def millimeters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_femtosecond)

    @property
    def millimeters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_attosecond)

    @property
    def millimeters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_minute)

    @property
    def millimeters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_hour)

    @property
    def millimeters_per_day(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_day)

    @property
    def millimeters_per_year(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_year)

    @property
    def micrometers_per_second(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_second)

    @property
    def micrometers_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_millisecond)

    @property
    def micrometers_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_microsecond)

    @property
    def micrometers_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_nanosecond)

    @property
    def micrometers_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_picosecond)

    @property
    def micrometers_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_femtosecond)

    @property
    def micrometers_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_attosecond)

    @property
    def micrometers_per_minute(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_minute)

    @property
    def micrometers_per_hour(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_hour)

    @property
    def micrometers_per_day(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_day)

    @property
    def micrometers_per_year(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_year)

    @property
    def nanometers_per_second(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_second)

    @property
    def nanometers_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_millisecond)

    @property
    def nanometers_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_microsecond)

    @property
    def nanometers_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_nanosecond)

    @property
    def nanometers_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_picosecond)

    @property
    def nanometers_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_femtosecond)

    @property
    def nanometers_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_attosecond)

    @property
    def nanometers_per_minute(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_minute)

    @property
    def nanometers_per_hour(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_hour)

    @property
    def nanometers_per_day(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_day)

    @property
    def nanometers_per_year(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_year)

    @property
    def picometers_per_second(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_second)

    @property
    def picometers_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_millisecond)

    @property
    def picometers_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_microsecond)

    @property
    def picometers_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_nanosecond)

    @property
    def picometers_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_picosecond)

    @property
    def picometers_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_femtosecond)

    @property
    def picometers_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_attosecond)

    @property
    def picometers_per_minute(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_minute)

    @property
    def picometers_per_hour(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_hour)

    @property
    def picometers_per_day(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_day)

    @property
    def picometers_per_year(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_year)

    @property
    def femtometers_per_second(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_second)

    @property
    def femtometers_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_millisecond)

    @property
    def femtometers_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_microsecond)

    @property
    def femtometers_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_nanosecond)

    @property
    def femtometers_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_picosecond)

    @property
    def femtometers_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_femtosecond)

    @property
    def femtometers_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_attosecond)

    @property
    def femtometers_per_minute(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_minute)

    @property
    def femtometers_per_hour(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_hour)

    @property
    def femtometers_per_day(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_day)

    @property
    def femtometers_per_year(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_year)

    @property
    def attometers_per_second(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_second)

    @property
    def attometers_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_millisecond)

    @property
    def attometers_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_microsecond)

    @property
    def attometers_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_nanosecond)

    @property
    def attometers_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_picosecond)

    @property
    def attometers_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_femtosecond)

    @property
    def attometers_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_attosecond)

    @property
    def attometers_per_minute(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_minute)

    @property
    def attometers_per_hour(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_hour)

    @property
    def attometers_per_day(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_day)

    @property
    def attometers_per_year(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_year)

    @property
    def decimeters_per_second(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_second)

    @property
    def decimeters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_millisecond)

    @property
    def decimeters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_microsecond)

    @property
    def decimeters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_nanosecond)

    @property
    def decimeters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_picosecond)

    @property
    def decimeters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_femtosecond)

    @property
    def decimeters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_attosecond)

    @property
    def decimeters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_minute)

    @property
    def decimeters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_hour)

    @property
    def decimeters_per_day(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_day)

    @property
    def decimeters_per_year(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_year)

    @property
    def centimeters_per_second(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_second)

    @property
    def centimeters_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_millisecond)

    @property
    def centimeters_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_microsecond)

    @property
    def centimeters_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_nanosecond)

    @property
    def centimeters_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_picosecond)

    @property
    def centimeters_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_femtosecond)

    @property
    def centimeters_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_attosecond)

    @property
    def centimeters_per_minute(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_minute)

    @property
    def centimeters_per_hour(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_hour)

    @property
    def centimeters_per_day(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_day)

    @property
    def centimeters_per_year(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_year)

    @property
    def angstroms_per_second(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_second)

    @property
    def angstroms_per_millisecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_millisecond)

    @property
    def angstroms_per_microsecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_microsecond)

    @property
    def angstroms_per_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_nanosecond)

    @property
    def angstroms_per_picosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_picosecond)

    @property
    def angstroms_per_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_femtosecond)

    @property
    def angstroms_per_attosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_attosecond)

    @property
    def angstroms_per_minute(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_minute)

    @property
    def angstroms_per_hour(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_hour)

    @property
    def angstroms_per_day(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_day)

    @property
    def angstroms_per_year(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_year)



class AccelerationAccessor[T](Accessor[T]):
    dimension_name = 'acceleration'
    
    @property
    def meters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_second)

    @property
    def meters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_millisecond)

    @property
    def meters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_microsecond)

    @property
    def meters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_nanosecond)

    @property
    def meters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_picosecond)

    @property
    def meters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_femtosecond)

    @property
    def meters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_attosecond)

    @property
    def meters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_minute)

    @property
    def meters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_hour)

    @property
    def meters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_day)

    @property
    def meters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.meters_per_square_year)

    @property
    def exameters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_second)

    @property
    def exameters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_millisecond)

    @property
    def exameters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_microsecond)

    @property
    def exameters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_nanosecond)

    @property
    def exameters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_picosecond)

    @property
    def exameters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_femtosecond)

    @property
    def exameters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_attosecond)

    @property
    def exameters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_minute)

    @property
    def exameters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_hour)

    @property
    def exameters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_day)

    @property
    def exameters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.exameters_per_square_year)

    @property
    def petameters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_second)

    @property
    def petameters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_millisecond)

    @property
    def petameters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_microsecond)

    @property
    def petameters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_nanosecond)

    @property
    def petameters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_picosecond)

    @property
    def petameters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_femtosecond)

    @property
    def petameters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_attosecond)

    @property
    def petameters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_minute)

    @property
    def petameters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_hour)

    @property
    def petameters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_day)

    @property
    def petameters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.petameters_per_square_year)

    @property
    def terameters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_second)

    @property
    def terameters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_millisecond)

    @property
    def terameters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_microsecond)

    @property
    def terameters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_nanosecond)

    @property
    def terameters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_picosecond)

    @property
    def terameters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_femtosecond)

    @property
    def terameters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_attosecond)

    @property
    def terameters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_minute)

    @property
    def terameters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_hour)

    @property
    def terameters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_day)

    @property
    def terameters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.terameters_per_square_year)

    @property
    def gigameters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_second)

    @property
    def gigameters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_millisecond)

    @property
    def gigameters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_microsecond)

    @property
    def gigameters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_nanosecond)

    @property
    def gigameters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_picosecond)

    @property
    def gigameters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_femtosecond)

    @property
    def gigameters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_attosecond)

    @property
    def gigameters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_minute)

    @property
    def gigameters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_hour)

    @property
    def gigameters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_day)

    @property
    def gigameters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.gigameters_per_square_year)

    @property
    def megameters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_second)

    @property
    def megameters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_millisecond)

    @property
    def megameters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_microsecond)

    @property
    def megameters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_nanosecond)

    @property
    def megameters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_picosecond)

    @property
    def megameters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_femtosecond)

    @property
    def megameters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_attosecond)

    @property
    def megameters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_minute)

    @property
    def megameters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_hour)

    @property
    def megameters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_day)

    @property
    def megameters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.megameters_per_square_year)

    @property
    def kilometers_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_second)

    @property
    def kilometers_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_millisecond)

    @property
    def kilometers_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_microsecond)

    @property
    def kilometers_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_nanosecond)

    @property
    def kilometers_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_picosecond)

    @property
    def kilometers_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_femtosecond)

    @property
    def kilometers_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_attosecond)

    @property
    def kilometers_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_minute)

    @property
    def kilometers_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_hour)

    @property
    def kilometers_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_day)

    @property
    def kilometers_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.kilometers_per_square_year)

    @property
    def millimeters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_second)

    @property
    def millimeters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_millisecond)

    @property
    def millimeters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_microsecond)

    @property
    def millimeters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_nanosecond)

    @property
    def millimeters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_picosecond)

    @property
    def millimeters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_femtosecond)

    @property
    def millimeters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_attosecond)

    @property
    def millimeters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_minute)

    @property
    def millimeters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_hour)

    @property
    def millimeters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_day)

    @property
    def millimeters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.millimeters_per_square_year)

    @property
    def micrometers_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_second)

    @property
    def micrometers_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_millisecond)

    @property
    def micrometers_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_microsecond)

    @property
    def micrometers_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_nanosecond)

    @property
    def micrometers_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_picosecond)

    @property
    def micrometers_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_femtosecond)

    @property
    def micrometers_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_attosecond)

    @property
    def micrometers_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_minute)

    @property
    def micrometers_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_hour)

    @property
    def micrometers_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_day)

    @property
    def micrometers_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.micrometers_per_square_year)

    @property
    def nanometers_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_second)

    @property
    def nanometers_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_millisecond)

    @property
    def nanometers_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_microsecond)

    @property
    def nanometers_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_nanosecond)

    @property
    def nanometers_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_picosecond)

    @property
    def nanometers_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_femtosecond)

    @property
    def nanometers_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_attosecond)

    @property
    def nanometers_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_minute)

    @property
    def nanometers_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_hour)

    @property
    def nanometers_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_day)

    @property
    def nanometers_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.nanometers_per_square_year)

    @property
    def picometers_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_second)

    @property
    def picometers_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_millisecond)

    @property
    def picometers_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_microsecond)

    @property
    def picometers_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_nanosecond)

    @property
    def picometers_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_picosecond)

    @property
    def picometers_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_femtosecond)

    @property
    def picometers_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_attosecond)

    @property
    def picometers_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_minute)

    @property
    def picometers_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_hour)

    @property
    def picometers_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_day)

    @property
    def picometers_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.picometers_per_square_year)

    @property
    def femtometers_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_second)

    @property
    def femtometers_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_millisecond)

    @property
    def femtometers_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_microsecond)

    @property
    def femtometers_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_nanosecond)

    @property
    def femtometers_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_picosecond)

    @property
    def femtometers_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_femtosecond)

    @property
    def femtometers_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_attosecond)

    @property
    def femtometers_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_minute)

    @property
    def femtometers_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_hour)

    @property
    def femtometers_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_day)

    @property
    def femtometers_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.femtometers_per_square_year)

    @property
    def attometers_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_second)

    @property
    def attometers_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_millisecond)

    @property
    def attometers_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_microsecond)

    @property
    def attometers_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_nanosecond)

    @property
    def attometers_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_picosecond)

    @property
    def attometers_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_femtosecond)

    @property
    def attometers_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_attosecond)

    @property
    def attometers_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_minute)

    @property
    def attometers_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_hour)

    @property
    def attometers_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_day)

    @property
    def attometers_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.attometers_per_square_year)

    @property
    def decimeters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_second)

    @property
    def decimeters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_millisecond)

    @property
    def decimeters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_microsecond)

    @property
    def decimeters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_nanosecond)

    @property
    def decimeters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_picosecond)

    @property
    def decimeters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_femtosecond)

    @property
    def decimeters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_attosecond)

    @property
    def decimeters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_minute)

    @property
    def decimeters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_hour)

    @property
    def decimeters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_day)

    @property
    def decimeters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.decimeters_per_square_year)

    @property
    def centimeters_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_second)

    @property
    def centimeters_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_millisecond)

    @property
    def centimeters_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_microsecond)

    @property
    def centimeters_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_nanosecond)

    @property
    def centimeters_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_picosecond)

    @property
    def centimeters_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_femtosecond)

    @property
    def centimeters_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_attosecond)

    @property
    def centimeters_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_minute)

    @property
    def centimeters_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_hour)

    @property
    def centimeters_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_day)

    @property
    def centimeters_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.centimeters_per_square_year)

    @property
    def angstroms_per_square_second(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_second)

    @property
    def angstroms_per_square_millisecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_millisecond)

    @property
    def angstroms_per_square_microsecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_microsecond)

    @property
    def angstroms_per_square_nanosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_nanosecond)

    @property
    def angstroms_per_square_picosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_picosecond)

    @property
    def angstroms_per_square_femtosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_femtosecond)

    @property
    def angstroms_per_square_attosecond(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_attosecond)

    @property
    def angstroms_per_square_minute(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_minute)

    @property
    def angstroms_per_square_hour(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_hour)

    @property
    def angstroms_per_square_day(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_day)

    @property
    def angstroms_per_square_year(self) -> T:
        return self.quantity.in_units_of(units.angstroms_per_square_year)



class DensityAccessor[T](Accessor[T]):
    dimension_name = 'density'
    
    @property
    def grams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_meter)

    @property
    def exagrams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_meter)

    @property
    def petagrams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_meter)

    @property
    def teragrams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_meter)

    @property
    def gigagrams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_meter)

    @property
    def megagrams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_meter)

    @property
    def kilograms_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_meter)

    @property
    def milligrams_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_meter)

    @property
    def micrograms_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_meter)

    @property
    def nanograms_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_meter)

    @property
    def picograms_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_meter)

    @property
    def femtograms_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_meter)

    @property
    def attograms_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_meter)

    @property
    def atomic_mass_units_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_meter)

    @property
    def grams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_exameter)

    @property
    def exagrams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_exameter)

    @property
    def petagrams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_exameter)

    @property
    def teragrams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_exameter)

    @property
    def gigagrams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_exameter)

    @property
    def megagrams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_exameter)

    @property
    def kilograms_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_exameter)

    @property
    def milligrams_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_exameter)

    @property
    def micrograms_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_exameter)

    @property
    def nanograms_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_exameter)

    @property
    def picograms_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_exameter)

    @property
    def femtograms_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_exameter)

    @property
    def attograms_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_exameter)

    @property
    def atomic_mass_units_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_exameter)

    @property
    def grams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_petameter)

    @property
    def exagrams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_petameter)

    @property
    def petagrams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_petameter)

    @property
    def teragrams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_petameter)

    @property
    def gigagrams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_petameter)

    @property
    def megagrams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_petameter)

    @property
    def kilograms_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_petameter)

    @property
    def milligrams_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_petameter)

    @property
    def micrograms_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_petameter)

    @property
    def nanograms_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_petameter)

    @property
    def picograms_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_petameter)

    @property
    def femtograms_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_petameter)

    @property
    def attograms_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_petameter)

    @property
    def atomic_mass_units_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_petameter)

    @property
    def grams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_terameter)

    @property
    def exagrams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_terameter)

    @property
    def petagrams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_terameter)

    @property
    def teragrams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_terameter)

    @property
    def gigagrams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_terameter)

    @property
    def megagrams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_terameter)

    @property
    def kilograms_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_terameter)

    @property
    def milligrams_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_terameter)

    @property
    def micrograms_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_terameter)

    @property
    def nanograms_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_terameter)

    @property
    def picograms_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_terameter)

    @property
    def femtograms_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_terameter)

    @property
    def attograms_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_terameter)

    @property
    def atomic_mass_units_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_terameter)

    @property
    def grams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_gigameter)

    @property
    def exagrams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_gigameter)

    @property
    def petagrams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_gigameter)

    @property
    def teragrams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_gigameter)

    @property
    def gigagrams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_gigameter)

    @property
    def megagrams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_gigameter)

    @property
    def kilograms_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_gigameter)

    @property
    def milligrams_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_gigameter)

    @property
    def micrograms_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_gigameter)

    @property
    def nanograms_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_gigameter)

    @property
    def picograms_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_gigameter)

    @property
    def femtograms_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_gigameter)

    @property
    def attograms_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_gigameter)

    @property
    def atomic_mass_units_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_gigameter)

    @property
    def grams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_megameter)

    @property
    def exagrams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_megameter)

    @property
    def petagrams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_megameter)

    @property
    def teragrams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_megameter)

    @property
    def gigagrams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_megameter)

    @property
    def megagrams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_megameter)

    @property
    def kilograms_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_megameter)

    @property
    def milligrams_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_megameter)

    @property
    def micrograms_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_megameter)

    @property
    def nanograms_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_megameter)

    @property
    def picograms_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_megameter)

    @property
    def femtograms_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_megameter)

    @property
    def attograms_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_megameter)

    @property
    def atomic_mass_units_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_megameter)

    @property
    def grams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_kilometer)

    @property
    def exagrams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_kilometer)

    @property
    def petagrams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_kilometer)

    @property
    def teragrams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_kilometer)

    @property
    def gigagrams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_kilometer)

    @property
    def megagrams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_kilometer)

    @property
    def kilograms_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_kilometer)

    @property
    def milligrams_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_kilometer)

    @property
    def micrograms_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_kilometer)

    @property
    def nanograms_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_kilometer)

    @property
    def picograms_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_kilometer)

    @property
    def femtograms_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_kilometer)

    @property
    def attograms_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_kilometer)

    @property
    def atomic_mass_units_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_kilometer)

    @property
    def grams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_millimeter)

    @property
    def exagrams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_millimeter)

    @property
    def petagrams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_millimeter)

    @property
    def teragrams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_millimeter)

    @property
    def gigagrams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_millimeter)

    @property
    def megagrams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_millimeter)

    @property
    def kilograms_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_millimeter)

    @property
    def milligrams_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_millimeter)

    @property
    def micrograms_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_millimeter)

    @property
    def nanograms_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_millimeter)

    @property
    def picograms_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_millimeter)

    @property
    def femtograms_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_millimeter)

    @property
    def attograms_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_millimeter)

    @property
    def atomic_mass_units_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_millimeter)

    @property
    def grams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_micrometer)

    @property
    def exagrams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_micrometer)

    @property
    def petagrams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_micrometer)

    @property
    def teragrams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_micrometer)

    @property
    def gigagrams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_micrometer)

    @property
    def megagrams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_micrometer)

    @property
    def kilograms_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_micrometer)

    @property
    def milligrams_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_micrometer)

    @property
    def micrograms_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_micrometer)

    @property
    def nanograms_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_micrometer)

    @property
    def picograms_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_micrometer)

    @property
    def femtograms_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_micrometer)

    @property
    def attograms_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_micrometer)

    @property
    def atomic_mass_units_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_micrometer)

    @property
    def grams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_nanometer)

    @property
    def exagrams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_nanometer)

    @property
    def petagrams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_nanometer)

    @property
    def teragrams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_nanometer)

    @property
    def gigagrams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_nanometer)

    @property
    def megagrams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_nanometer)

    @property
    def kilograms_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_nanometer)

    @property
    def milligrams_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_nanometer)

    @property
    def micrograms_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_nanometer)

    @property
    def nanograms_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_nanometer)

    @property
    def picograms_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_nanometer)

    @property
    def femtograms_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_nanometer)

    @property
    def attograms_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_nanometer)

    @property
    def atomic_mass_units_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_nanometer)

    @property
    def grams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_picometer)

    @property
    def exagrams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_picometer)

    @property
    def petagrams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_picometer)

    @property
    def teragrams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_picometer)

    @property
    def gigagrams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_picometer)

    @property
    def megagrams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_picometer)

    @property
    def kilograms_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_picometer)

    @property
    def milligrams_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_picometer)

    @property
    def micrograms_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_picometer)

    @property
    def nanograms_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_picometer)

    @property
    def picograms_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_picometer)

    @property
    def femtograms_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_picometer)

    @property
    def attograms_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_picometer)

    @property
    def atomic_mass_units_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_picometer)

    @property
    def grams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_femtometer)

    @property
    def exagrams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_femtometer)

    @property
    def petagrams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_femtometer)

    @property
    def teragrams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_femtometer)

    @property
    def gigagrams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_femtometer)

    @property
    def megagrams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_femtometer)

    @property
    def kilograms_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_femtometer)

    @property
    def milligrams_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_femtometer)

    @property
    def micrograms_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_femtometer)

    @property
    def nanograms_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_femtometer)

    @property
    def picograms_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_femtometer)

    @property
    def femtograms_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_femtometer)

    @property
    def attograms_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_femtometer)

    @property
    def atomic_mass_units_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_femtometer)

    @property
    def grams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_attometer)

    @property
    def exagrams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_attometer)

    @property
    def petagrams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_attometer)

    @property
    def teragrams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_attometer)

    @property
    def gigagrams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_attometer)

    @property
    def megagrams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_attometer)

    @property
    def kilograms_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_attometer)

    @property
    def milligrams_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_attometer)

    @property
    def micrograms_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_attometer)

    @property
    def nanograms_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_attometer)

    @property
    def picograms_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_attometer)

    @property
    def femtograms_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_attometer)

    @property
    def attograms_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_attometer)

    @property
    def atomic_mass_units_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_attometer)

    @property
    def grams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_decimeter)

    @property
    def exagrams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_decimeter)

    @property
    def petagrams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_decimeter)

    @property
    def teragrams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_decimeter)

    @property
    def gigagrams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_decimeter)

    @property
    def megagrams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_decimeter)

    @property
    def kilograms_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_decimeter)

    @property
    def milligrams_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_decimeter)

    @property
    def micrograms_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_decimeter)

    @property
    def nanograms_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_decimeter)

    @property
    def picograms_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_decimeter)

    @property
    def femtograms_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_decimeter)

    @property
    def attograms_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_decimeter)

    @property
    def atomic_mass_units_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_decimeter)

    @property
    def grams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_centimeter)

    @property
    def exagrams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_centimeter)

    @property
    def petagrams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_centimeter)

    @property
    def teragrams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_centimeter)

    @property
    def gigagrams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_centimeter)

    @property
    def megagrams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_centimeter)

    @property
    def kilograms_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_centimeter)

    @property
    def milligrams_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_centimeter)

    @property
    def micrograms_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_centimeter)

    @property
    def nanograms_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_centimeter)

    @property
    def picograms_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_centimeter)

    @property
    def femtograms_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_centimeter)

    @property
    def attograms_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_centimeter)

    @property
    def atomic_mass_units_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_centimeter)

    @property
    def grams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.grams_per_cubic_angstrom)

    @property
    def exagrams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.exagrams_per_cubic_angstrom)

    @property
    def petagrams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.petagrams_per_cubic_angstrom)

    @property
    def teragrams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.teragrams_per_cubic_angstrom)

    @property
    def gigagrams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.gigagrams_per_cubic_angstrom)

    @property
    def megagrams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.megagrams_per_cubic_angstrom)

    @property
    def kilograms_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.kilograms_per_cubic_angstrom)

    @property
    def milligrams_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.milligrams_per_cubic_angstrom)

    @property
    def micrograms_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.micrograms_per_cubic_angstrom)

    @property
    def nanograms_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.nanograms_per_cubic_angstrom)

    @property
    def picograms_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.picograms_per_cubic_angstrom)

    @property
    def femtograms_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.femtograms_per_cubic_angstrom)

    @property
    def attograms_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.attograms_per_cubic_angstrom)

    @property
    def atomic_mass_units_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.atomic_mass_units_per_cubic_angstrom)



class ForceAccessor[T](Accessor[T]):
    dimension_name = 'force'
    
    @property
    def newtons(self) -> T:
        return self.quantity.in_units_of(units.newtons)

    @property
    def exanewtons(self) -> T:
        return self.quantity.in_units_of(units.exanewtons)

    @property
    def petanewtons(self) -> T:
        return self.quantity.in_units_of(units.petanewtons)

    @property
    def teranewtons(self) -> T:
        return self.quantity.in_units_of(units.teranewtons)

    @property
    def giganewtons(self) -> T:
        return self.quantity.in_units_of(units.giganewtons)

    @property
    def meganewtons(self) -> T:
        return self.quantity.in_units_of(units.meganewtons)

    @property
    def kilonewtons(self) -> T:
        return self.quantity.in_units_of(units.kilonewtons)

    @property
    def millinewtons(self) -> T:
        return self.quantity.in_units_of(units.millinewtons)

    @property
    def micronewtons(self) -> T:
        return self.quantity.in_units_of(units.micronewtons)

    @property
    def nanonewtons(self) -> T:
        return self.quantity.in_units_of(units.nanonewtons)

    @property
    def piconewtons(self) -> T:
        return self.quantity.in_units_of(units.piconewtons)

    @property
    def femtonewtons(self) -> T:
        return self.quantity.in_units_of(units.femtonewtons)

    @property
    def attonewtons(self) -> T:
        return self.quantity.in_units_of(units.attonewtons)



class PressureAccessor[T](Accessor[T]):
    dimension_name = 'pressure'
    
    @property
    def pascals(self) -> T:
        return self.quantity.in_units_of(units.pascals)

    @property
    def exapascals(self) -> T:
        return self.quantity.in_units_of(units.exapascals)

    @property
    def petapascals(self) -> T:
        return self.quantity.in_units_of(units.petapascals)

    @property
    def terapascals(self) -> T:
        return self.quantity.in_units_of(units.terapascals)

    @property
    def gigapascals(self) -> T:
        return self.quantity.in_units_of(units.gigapascals)

    @property
    def megapascals(self) -> T:
        return self.quantity.in_units_of(units.megapascals)

    @property
    def kilopascals(self) -> T:
        return self.quantity.in_units_of(units.kilopascals)

    @property
    def millipascals(self) -> T:
        return self.quantity.in_units_of(units.millipascals)

    @property
    def micropascals(self) -> T:
        return self.quantity.in_units_of(units.micropascals)

    @property
    def nanopascals(self) -> T:
        return self.quantity.in_units_of(units.nanopascals)

    @property
    def picopascals(self) -> T:
        return self.quantity.in_units_of(units.picopascals)

    @property
    def femtopascals(self) -> T:
        return self.quantity.in_units_of(units.femtopascals)

    @property
    def attopascals(self) -> T:
        return self.quantity.in_units_of(units.attopascals)



class EnergyAccessor[T](Accessor[T]):
    dimension_name = 'energy'
    
    @property
    def joules(self) -> T:
        return self.quantity.in_units_of(units.joules)

    @property
    def exajoules(self) -> T:
        return self.quantity.in_units_of(units.exajoules)

    @property
    def petajoules(self) -> T:
        return self.quantity.in_units_of(units.petajoules)

    @property
    def terajoules(self) -> T:
        return self.quantity.in_units_of(units.terajoules)

    @property
    def gigajoules(self) -> T:
        return self.quantity.in_units_of(units.gigajoules)

    @property
    def megajoules(self) -> T:
        return self.quantity.in_units_of(units.megajoules)

    @property
    def kilojoules(self) -> T:
        return self.quantity.in_units_of(units.kilojoules)

    @property
    def millijoules(self) -> T:
        return self.quantity.in_units_of(units.millijoules)

    @property
    def microjoules(self) -> T:
        return self.quantity.in_units_of(units.microjoules)

    @property
    def nanojoules(self) -> T:
        return self.quantity.in_units_of(units.nanojoules)

    @property
    def picojoules(self) -> T:
        return self.quantity.in_units_of(units.picojoules)

    @property
    def femtojoules(self) -> T:
        return self.quantity.in_units_of(units.femtojoules)

    @property
    def attojoules(self) -> T:
        return self.quantity.in_units_of(units.attojoules)

    @property
    def electronvolts(self) -> T:
        return self.quantity.in_units_of(units.electronvolts)

    @property
    def exaelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.exaelectronvolts)

    @property
    def petaelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.petaelectronvolts)

    @property
    def teraelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.teraelectronvolts)

    @property
    def gigaelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.gigaelectronvolts)

    @property
    def megaelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.megaelectronvolts)

    @property
    def kiloelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.kiloelectronvolts)

    @property
    def millielectronvolts(self) -> T:
        return self.quantity.in_units_of(units.millielectronvolts)

    @property
    def microelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.microelectronvolts)

    @property
    def nanoelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.nanoelectronvolts)

    @property
    def picoelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.picoelectronvolts)

    @property
    def femtoelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.femtoelectronvolts)

    @property
    def attoelectronvolts(self) -> T:
        return self.quantity.in_units_of(units.attoelectronvolts)



class PowerAccessor[T](Accessor[T]):
    dimension_name = 'power'
    
    @property
    def watts(self) -> T:
        return self.quantity.in_units_of(units.watts)

    @property
    def exawatts(self) -> T:
        return self.quantity.in_units_of(units.exawatts)

    @property
    def petawatts(self) -> T:
        return self.quantity.in_units_of(units.petawatts)

    @property
    def terawatts(self) -> T:
        return self.quantity.in_units_of(units.terawatts)

    @property
    def gigawatts(self) -> T:
        return self.quantity.in_units_of(units.gigawatts)

    @property
    def megawatts(self) -> T:
        return self.quantity.in_units_of(units.megawatts)

    @property
    def kilowatts(self) -> T:
        return self.quantity.in_units_of(units.kilowatts)

    @property
    def milliwatts(self) -> T:
        return self.quantity.in_units_of(units.milliwatts)

    @property
    def microwatts(self) -> T:
        return self.quantity.in_units_of(units.microwatts)

    @property
    def nanowatts(self) -> T:
        return self.quantity.in_units_of(units.nanowatts)

    @property
    def picowatts(self) -> T:
        return self.quantity.in_units_of(units.picowatts)

    @property
    def femtowatts(self) -> T:
        return self.quantity.in_units_of(units.femtowatts)

    @property
    def attowatts(self) -> T:
        return self.quantity.in_units_of(units.attowatts)



class ChargeAccessor[T](Accessor[T]):
    dimension_name = 'charge'
    
    @property
    def coulombs(self) -> T:
        return self.quantity.in_units_of(units.coulombs)

    @property
    def exacoulombs(self) -> T:
        return self.quantity.in_units_of(units.exacoulombs)

    @property
    def petacoulombs(self) -> T:
        return self.quantity.in_units_of(units.petacoulombs)

    @property
    def teracoulombs(self) -> T:
        return self.quantity.in_units_of(units.teracoulombs)

    @property
    def gigacoulombs(self) -> T:
        return self.quantity.in_units_of(units.gigacoulombs)

    @property
    def megacoulombs(self) -> T:
        return self.quantity.in_units_of(units.megacoulombs)

    @property
    def kilocoulombs(self) -> T:
        return self.quantity.in_units_of(units.kilocoulombs)

    @property
    def millicoulombs(self) -> T:
        return self.quantity.in_units_of(units.millicoulombs)

    @property
    def microcoulombs(self) -> T:
        return self.quantity.in_units_of(units.microcoulombs)

    @property
    def nanocoulombs(self) -> T:
        return self.quantity.in_units_of(units.nanocoulombs)

    @property
    def picocoulombs(self) -> T:
        return self.quantity.in_units_of(units.picocoulombs)

    @property
    def femtocoulombs(self) -> T:
        return self.quantity.in_units_of(units.femtocoulombs)

    @property
    def attocoulombs(self) -> T:
        return self.quantity.in_units_of(units.attocoulombs)



class PotentialAccessor[T](Accessor[T]):
    dimension_name = 'potential'
    
    @property
    def volts(self) -> T:
        return self.quantity.in_units_of(units.volts)

    @property
    def exavolts(self) -> T:
        return self.quantity.in_units_of(units.exavolts)

    @property
    def petavolts(self) -> T:
        return self.quantity.in_units_of(units.petavolts)

    @property
    def teravolts(self) -> T:
        return self.quantity.in_units_of(units.teravolts)

    @property
    def gigavolts(self) -> T:
        return self.quantity.in_units_of(units.gigavolts)

    @property
    def megavolts(self) -> T:
        return self.quantity.in_units_of(units.megavolts)

    @property
    def kilovolts(self) -> T:
        return self.quantity.in_units_of(units.kilovolts)

    @property
    def millivolts(self) -> T:
        return self.quantity.in_units_of(units.millivolts)

    @property
    def microvolts(self) -> T:
        return self.quantity.in_units_of(units.microvolts)

    @property
    def nanovolts(self) -> T:
        return self.quantity.in_units_of(units.nanovolts)

    @property
    def picovolts(self) -> T:
        return self.quantity.in_units_of(units.picovolts)

    @property
    def femtovolts(self) -> T:
        return self.quantity.in_units_of(units.femtovolts)

    @property
    def attovolts(self) -> T:
        return self.quantity.in_units_of(units.attovolts)



class ResistanceAccessor[T](Accessor[T]):
    dimension_name = 'resistance'
    
    @property
    def ohms(self) -> T:
        return self.quantity.in_units_of(units.ohms)

    @property
    def exaohms(self) -> T:
        return self.quantity.in_units_of(units.exaohms)

    @property
    def petaohms(self) -> T:
        return self.quantity.in_units_of(units.petaohms)

    @property
    def teraohms(self) -> T:
        return self.quantity.in_units_of(units.teraohms)

    @property
    def gigaohms(self) -> T:
        return self.quantity.in_units_of(units.gigaohms)

    @property
    def megaohms(self) -> T:
        return self.quantity.in_units_of(units.megaohms)

    @property
    def kiloohms(self) -> T:
        return self.quantity.in_units_of(units.kiloohms)

    @property
    def milliohms(self) -> T:
        return self.quantity.in_units_of(units.milliohms)

    @property
    def microohms(self) -> T:
        return self.quantity.in_units_of(units.microohms)

    @property
    def nanoohms(self) -> T:
        return self.quantity.in_units_of(units.nanoohms)

    @property
    def picoohms(self) -> T:
        return self.quantity.in_units_of(units.picoohms)

    @property
    def femtoohms(self) -> T:
        return self.quantity.in_units_of(units.femtoohms)

    @property
    def attoohms(self) -> T:
        return self.quantity.in_units_of(units.attoohms)



class CapacitanceAccessor[T](Accessor[T]):
    dimension_name = 'capacitance'
    
    @property
    def farads(self) -> T:
        return self.quantity.in_units_of(units.farads)

    @property
    def exafarads(self) -> T:
        return self.quantity.in_units_of(units.exafarads)

    @property
    def petafarads(self) -> T:
        return self.quantity.in_units_of(units.petafarads)

    @property
    def terafarads(self) -> T:
        return self.quantity.in_units_of(units.terafarads)

    @property
    def gigafarads(self) -> T:
        return self.quantity.in_units_of(units.gigafarads)

    @property
    def megafarads(self) -> T:
        return self.quantity.in_units_of(units.megafarads)

    @property
    def kilofarads(self) -> T:
        return self.quantity.in_units_of(units.kilofarads)

    @property
    def millifarads(self) -> T:
        return self.quantity.in_units_of(units.millifarads)

    @property
    def microfarads(self) -> T:
        return self.quantity.in_units_of(units.microfarads)

    @property
    def nanofarads(self) -> T:
        return self.quantity.in_units_of(units.nanofarads)

    @property
    def picofarads(self) -> T:
        return self.quantity.in_units_of(units.picofarads)

    @property
    def femtofarads(self) -> T:
        return self.quantity.in_units_of(units.femtofarads)

    @property
    def attofarads(self) -> T:
        return self.quantity.in_units_of(units.attofarads)



class ConductanceAccessor[T](Accessor[T]):
    dimension_name = 'conductance'
    
    @property
    def siemens(self) -> T:
        return self.quantity.in_units_of(units.siemens)

    @property
    def exasiemens(self) -> T:
        return self.quantity.in_units_of(units.exasiemens)

    @property
    def petasiemens(self) -> T:
        return self.quantity.in_units_of(units.petasiemens)

    @property
    def terasiemens(self) -> T:
        return self.quantity.in_units_of(units.terasiemens)

    @property
    def gigasiemens(self) -> T:
        return self.quantity.in_units_of(units.gigasiemens)

    @property
    def megasiemens(self) -> T:
        return self.quantity.in_units_of(units.megasiemens)

    @property
    def kilosiemens(self) -> T:
        return self.quantity.in_units_of(units.kilosiemens)

    @property
    def millisiemens(self) -> T:
        return self.quantity.in_units_of(units.millisiemens)

    @property
    def microsiemens(self) -> T:
        return self.quantity.in_units_of(units.microsiemens)

    @property
    def nanosiemens(self) -> T:
        return self.quantity.in_units_of(units.nanosiemens)

    @property
    def picosiemens(self) -> T:
        return self.quantity.in_units_of(units.picosiemens)

    @property
    def femtosiemens(self) -> T:
        return self.quantity.in_units_of(units.femtosiemens)

    @property
    def attosiemens(self) -> T:
        return self.quantity.in_units_of(units.attosiemens)



class MagneticfluxAccessor[T](Accessor[T]):
    dimension_name = 'magnetic_flux'
    
    @property
    def webers(self) -> T:
        return self.quantity.in_units_of(units.webers)

    @property
    def exawebers(self) -> T:
        return self.quantity.in_units_of(units.exawebers)

    @property
    def petawebers(self) -> T:
        return self.quantity.in_units_of(units.petawebers)

    @property
    def terawebers(self) -> T:
        return self.quantity.in_units_of(units.terawebers)

    @property
    def gigawebers(self) -> T:
        return self.quantity.in_units_of(units.gigawebers)

    @property
    def megawebers(self) -> T:
        return self.quantity.in_units_of(units.megawebers)

    @property
    def kilowebers(self) -> T:
        return self.quantity.in_units_of(units.kilowebers)

    @property
    def milliwebers(self) -> T:
        return self.quantity.in_units_of(units.milliwebers)

    @property
    def microwebers(self) -> T:
        return self.quantity.in_units_of(units.microwebers)

    @property
    def nanowebers(self) -> T:
        return self.quantity.in_units_of(units.nanowebers)

    @property
    def picowebers(self) -> T:
        return self.quantity.in_units_of(units.picowebers)

    @property
    def femtowebers(self) -> T:
        return self.quantity.in_units_of(units.femtowebers)

    @property
    def attowebers(self) -> T:
        return self.quantity.in_units_of(units.attowebers)



class MagneticfluxdensityAccessor[T](Accessor[T]):
    dimension_name = 'magnetic_flux_density'
    
    @property
    def tesla(self) -> T:
        return self.quantity.in_units_of(units.tesla)

    @property
    def exatesla(self) -> T:
        return self.quantity.in_units_of(units.exatesla)

    @property
    def petatesla(self) -> T:
        return self.quantity.in_units_of(units.petatesla)

    @property
    def teratesla(self) -> T:
        return self.quantity.in_units_of(units.teratesla)

    @property
    def gigatesla(self) -> T:
        return self.quantity.in_units_of(units.gigatesla)

    @property
    def megatesla(self) -> T:
        return self.quantity.in_units_of(units.megatesla)

    @property
    def kilotesla(self) -> T:
        return self.quantity.in_units_of(units.kilotesla)

    @property
    def millitesla(self) -> T:
        return self.quantity.in_units_of(units.millitesla)

    @property
    def microtesla(self) -> T:
        return self.quantity.in_units_of(units.microtesla)

    @property
    def nanotesla(self) -> T:
        return self.quantity.in_units_of(units.nanotesla)

    @property
    def picotesla(self) -> T:
        return self.quantity.in_units_of(units.picotesla)

    @property
    def femtotesla(self) -> T:
        return self.quantity.in_units_of(units.femtotesla)

    @property
    def attotesla(self) -> T:
        return self.quantity.in_units_of(units.attotesla)



class InductanceAccessor[T](Accessor[T]):
    dimension_name = 'inductance'
    
    @property
    def henry(self) -> T:
        return self.quantity.in_units_of(units.henry)

    @property
    def exahenry(self) -> T:
        return self.quantity.in_units_of(units.exahenry)

    @property
    def petahenry(self) -> T:
        return self.quantity.in_units_of(units.petahenry)

    @property
    def terahenry(self) -> T:
        return self.quantity.in_units_of(units.terahenry)

    @property
    def gigahenry(self) -> T:
        return self.quantity.in_units_of(units.gigahenry)

    @property
    def megahenry(self) -> T:
        return self.quantity.in_units_of(units.megahenry)

    @property
    def kilohenry(self) -> T:
        return self.quantity.in_units_of(units.kilohenry)

    @property
    def millihenry(self) -> T:
        return self.quantity.in_units_of(units.millihenry)

    @property
    def microhenry(self) -> T:
        return self.quantity.in_units_of(units.microhenry)

    @property
    def nanohenry(self) -> T:
        return self.quantity.in_units_of(units.nanohenry)

    @property
    def picohenry(self) -> T:
        return self.quantity.in_units_of(units.picohenry)

    @property
    def femtohenry(self) -> T:
        return self.quantity.in_units_of(units.femtohenry)

    @property
    def attohenry(self) -> T:
        return self.quantity.in_units_of(units.attohenry)



class TemperatureAccessor[T](Accessor[T]):
    dimension_name = 'temperature'
    
    @property
    def kelvin(self) -> T:
        return self.quantity.in_units_of(units.kelvin)

    @property
    def exakelvin(self) -> T:
        return self.quantity.in_units_of(units.exakelvin)

    @property
    def petakelvin(self) -> T:
        return self.quantity.in_units_of(units.petakelvin)

    @property
    def terakelvin(self) -> T:
        return self.quantity.in_units_of(units.terakelvin)

    @property
    def gigakelvin(self) -> T:
        return self.quantity.in_units_of(units.gigakelvin)

    @property
    def megakelvin(self) -> T:
        return self.quantity.in_units_of(units.megakelvin)

    @property
    def kilokelvin(self) -> T:
        return self.quantity.in_units_of(units.kilokelvin)

    @property
    def millikelvin(self) -> T:
        return self.quantity.in_units_of(units.millikelvin)

    @property
    def microkelvin(self) -> T:
        return self.quantity.in_units_of(units.microkelvin)

    @property
    def nanokelvin(self) -> T:
        return self.quantity.in_units_of(units.nanokelvin)

    @property
    def picokelvin(self) -> T:
        return self.quantity.in_units_of(units.picokelvin)

    @property
    def femtokelvin(self) -> T:
        return self.quantity.in_units_of(units.femtokelvin)

    @property
    def attokelvin(self) -> T:
        return self.quantity.in_units_of(units.attokelvin)

    @property
    def degrees_celsius(self) -> T:
        return self.quantity.in_units_of(units.degrees_celsius)



class DimensionlessAccessor[T](Accessor[T]):
    dimension_name = 'dimensionless'
    
    @property
    def none(self) -> T:
        return self.quantity.in_units_of(units.none)



class AngleAccessor[T](Accessor[T]):
    dimension_name = 'angle'
    
    @property
    def degrees(self) -> T:
        return self.quantity.in_units_of(units.degrees)

    @property
    def radians(self) -> T:
        return self.quantity.in_units_of(units.radians)



class SolidangleAccessor[T](Accessor[T]):
    dimension_name = 'solid_angle'
    
    @property
    def stradians(self) -> T:
        return self.quantity.in_units_of(units.stradians)



class AmountAccessor[T](Accessor[T]):
    dimension_name = 'amount'
    
    @property
    def moles(self) -> T:
        return self.quantity.in_units_of(units.moles)

    @property
    def millimoles(self) -> T:
        return self.quantity.in_units_of(units.millimoles)

    @property
    def micromoles(self) -> T:
        return self.quantity.in_units_of(units.micromoles)

    @property
    def nanomoles(self) -> T:
        return self.quantity.in_units_of(units.nanomoles)

    @property
    def picomoles(self) -> T:
        return self.quantity.in_units_of(units.picomoles)

    @property
    def femtomoles(self) -> T:
        return self.quantity.in_units_of(units.femtomoles)

    @property
    def attomoles(self) -> T:
        return self.quantity.in_units_of(units.attomoles)



class ConcentrationAccessor[T](Accessor[T]):
    dimension_name = 'concentration'
    
    @property
    def moles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_meter)

    @property
    def millimoles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_meter)

    @property
    def micromoles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_meter)

    @property
    def nanomoles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_meter)

    @property
    def picomoles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_meter)

    @property
    def femtomoles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_meter)

    @property
    def attomoles_per_cubic_meter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_meter)

    @property
    def moles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_exameter)

    @property
    def millimoles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_exameter)

    @property
    def micromoles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_exameter)

    @property
    def nanomoles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_exameter)

    @property
    def picomoles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_exameter)

    @property
    def femtomoles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_exameter)

    @property
    def attomoles_per_cubic_exameter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_exameter)

    @property
    def moles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_petameter)

    @property
    def millimoles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_petameter)

    @property
    def micromoles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_petameter)

    @property
    def nanomoles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_petameter)

    @property
    def picomoles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_petameter)

    @property
    def femtomoles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_petameter)

    @property
    def attomoles_per_cubic_petameter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_petameter)

    @property
    def moles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_terameter)

    @property
    def millimoles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_terameter)

    @property
    def micromoles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_terameter)

    @property
    def nanomoles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_terameter)

    @property
    def picomoles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_terameter)

    @property
    def femtomoles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_terameter)

    @property
    def attomoles_per_cubic_terameter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_terameter)

    @property
    def moles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_gigameter)

    @property
    def millimoles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_gigameter)

    @property
    def micromoles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_gigameter)

    @property
    def nanomoles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_gigameter)

    @property
    def picomoles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_gigameter)

    @property
    def femtomoles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_gigameter)

    @property
    def attomoles_per_cubic_gigameter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_gigameter)

    @property
    def moles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_megameter)

    @property
    def millimoles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_megameter)

    @property
    def micromoles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_megameter)

    @property
    def nanomoles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_megameter)

    @property
    def picomoles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_megameter)

    @property
    def femtomoles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_megameter)

    @property
    def attomoles_per_cubic_megameter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_megameter)

    @property
    def moles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_kilometer)

    @property
    def millimoles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_kilometer)

    @property
    def micromoles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_kilometer)

    @property
    def nanomoles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_kilometer)

    @property
    def picomoles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_kilometer)

    @property
    def femtomoles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_kilometer)

    @property
    def attomoles_per_cubic_kilometer(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_kilometer)

    @property
    def moles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_millimeter)

    @property
    def millimoles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_millimeter)

    @property
    def micromoles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_millimeter)

    @property
    def nanomoles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_millimeter)

    @property
    def picomoles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_millimeter)

    @property
    def femtomoles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_millimeter)

    @property
    def attomoles_per_cubic_millimeter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_millimeter)

    @property
    def moles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_micrometer)

    @property
    def millimoles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_micrometer)

    @property
    def micromoles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_micrometer)

    @property
    def nanomoles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_micrometer)

    @property
    def picomoles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_micrometer)

    @property
    def femtomoles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_micrometer)

    @property
    def attomoles_per_cubic_micrometer(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_micrometer)

    @property
    def moles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_nanometer)

    @property
    def millimoles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_nanometer)

    @property
    def micromoles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_nanometer)

    @property
    def nanomoles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_nanometer)

    @property
    def picomoles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_nanometer)

    @property
    def femtomoles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_nanometer)

    @property
    def attomoles_per_cubic_nanometer(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_nanometer)

    @property
    def moles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_picometer)

    @property
    def millimoles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_picometer)

    @property
    def micromoles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_picometer)

    @property
    def nanomoles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_picometer)

    @property
    def picomoles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_picometer)

    @property
    def femtomoles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_picometer)

    @property
    def attomoles_per_cubic_picometer(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_picometer)

    @property
    def moles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_femtometer)

    @property
    def millimoles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_femtometer)

    @property
    def micromoles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_femtometer)

    @property
    def nanomoles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_femtometer)

    @property
    def picomoles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_femtometer)

    @property
    def femtomoles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_femtometer)

    @property
    def attomoles_per_cubic_femtometer(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_femtometer)

    @property
    def moles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_attometer)

    @property
    def millimoles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_attometer)

    @property
    def micromoles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_attometer)

    @property
    def nanomoles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_attometer)

    @property
    def picomoles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_attometer)

    @property
    def femtomoles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_attometer)

    @property
    def attomoles_per_cubic_attometer(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_attometer)

    @property
    def moles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_decimeter)

    @property
    def millimoles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_decimeter)

    @property
    def micromoles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_decimeter)

    @property
    def nanomoles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_decimeter)

    @property
    def picomoles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_decimeter)

    @property
    def femtomoles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_decimeter)

    @property
    def attomoles_per_cubic_decimeter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_decimeter)

    @property
    def moles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_centimeter)

    @property
    def millimoles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_centimeter)

    @property
    def micromoles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_centimeter)

    @property
    def nanomoles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_centimeter)

    @property
    def picomoles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_centimeter)

    @property
    def femtomoles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_centimeter)

    @property
    def attomoles_per_cubic_centimeter(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_centimeter)

    @property
    def moles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.moles_per_cubic_angstrom)

    @property
    def millimoles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.millimoles_per_cubic_angstrom)

    @property
    def micromoles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.micromoles_per_cubic_angstrom)

    @property
    def nanomoles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.nanomoles_per_cubic_angstrom)

    @property
    def picomoles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.picomoles_per_cubic_angstrom)

    @property
    def femtomoles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.femtomoles_per_cubic_angstrom)

    @property
    def attomoles_per_cubic_angstrom(self) -> T:
        return self.quantity.in_units_of(units.attomoles_per_cubic_angstrom)


